// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.// sources:
// examples/applier/resources/yamlfilereader/clusterrole.yaml
// examples/applier/resources/yamlfilereader/clusterrolebinding.yaml
// examples/applier/resources/yamlfilereader/namespace.yaml
// examples/applier/resources/yamlfilereader/serviceaccount.yaml
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd0\xbf\x4e\xc3\x30\x10\x06\xf0\xdd\x4f\x71\x0a\x2b\x09\x62\x43\xde\x10\x03\x13\x0c\x0c\x2c\x28\xc3\x35\x39\xdc\x53\x1d\x3b\xdc\x9d\x5b\x89\xaa\xef\x8e\xf2\x67\xa0\x6a\x3b\x9d\x2c\xff\x6c\x7d\xdf\xe1\xc8\x9f\x24\xca\x39\x79\x90\x0d\x76\x0d\x16\xdb\x66\xe1\x5f\x34\xce\xa9\xd9\x3d\x69\xc3\xf9\x61\xff\xe8\x76\x9c\x7a\x0f\x2f\xb1\xa8\x91\x7c\xe4\x48\x6e\x20\xc3\x1e\x0d\xbd\x03\x48\x38\x90\x87\xe3\x11\x9a\x37\x4c\x18\xa8\x5f\xe1\x3b\x0e\x04\xa7\x93\x93\x12\x49\xbd\xbb\x83\xe7\x18\xf3\x01\x86\x05\x01\x06\x4a\x06\x96\x41\xb2\xa1\x11\xb0\x29\x74\x24\xc6\xdf\xdc\xa1\x91\xab\x01\x47\x7e\x95\x5c\x46\xf5\xf0\x55\xfd\xbb\xd2\x35\x5a\xd5\x3a\x00\x21\xcd\x45\x3a\xba\x40\x1c\x12\xa7\x20\xf4\x53\x48\x4d\x67\xbb\x27\xd9\x2c\x4e\x08\x8d\xaa\x7b\xa8\x02\xd9\x34\x22\xeb\x3c\x0f\x68\xdd\xb6\x6a\x6f\x87\x0d\x64\x17\xc9\x96\xba\x4d\x1e\x29\xd5\xeb\xa1\x5e\x1e\x0e\x94\xec\x6a\xd0\xf5\xdf\x55\xeb\x19\x98\xf6\x36\xa3\x9b\x2b\x3d\x2f\x33\x55\x68\xdd\x5f\x00\x00\x00\xff\xff\xce\x6a\xc1\x2d\xcd\x01\x00\x00")

func clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterroleYaml,
		"clusterrole.yaml",
	)
}

func clusterroleYaml() (*asset, error) {
	bytes, err := clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\xb1\x4e\x03\x31\x0c\xc6\xf1\x3d\x4f\xe1\x17\x20\x88\x0d\x65\xa3\x0c\x4c\x30\x14\x89\xdd\x4d\x4c\x31\xbd\xb3\x23\xc7\xe9\xc0\xe9\xde\x1d\x1d\x1c\xc3\x09\x81\x3a\xfb\xe7\xef\x8f\x95\x5f\xc8\x1a\xab\x24\xb0\x03\xe6\x88\xdd\xdf\xd4\xf8\x03\x9d\x55\xe2\xe9\xb6\x45\xd6\xeb\xf3\x4d\x38\xb1\x94\x04\xf7\x43\x6f\x4e\xb6\xd7\x81\x76\x2c\x85\xe5\x18\x46\x72\x2c\xe8\x98\x02\x80\xe0\x48\x09\xa6\x09\xe2\x23\x0a\x1e\xa9\xac\xfe\x09\x47\x82\x79\x0e\xa6\x03\xed\xe9\x75\xa1\x58\xf9\xc1\xb4\xd7\x7f\xb2\x01\xe0\x57\xf5\x82\x48\xeb\x87\x77\xca\xde\x52\xb8\x5a\xff\x9f\xc9\xce\x9c\xe9\x2e\x67\xed\xe2\x9b\x89\x9d\xaa\x37\x37\xac\x5b\xf3\xb3\xf5\x4d\x5b\xc5\xfc\x67\xf2\xeb\xb8\xd8\xcf\x00\x00\x00\xff\xff\x0c\x8e\x56\x5f\x4b\x01\x00\x00")

func clusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterrolebindingYaml,
		"clusterrolebinding.yaml",
	)
}

func clusterrolebindingYaml() (*asset, error) {
	bytes, err := clusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\xf0\x4b\xcc\x4d\x2d\x2e\x48\x4c\x4e\xe5\xca\x4d\x2d\x49\x4c\x49\x2c\x49\xb4\xe2\x52\x50\xc8\x4b\xcc\x4d\xb5\x52\x50\xaa\xae\x56\xd0\xf3\x4d\xcc\x4b\x4c\x4f\x4d\x71\xce\x29\x2d\x2e\x49\x2d\x82\x2b\x57\xa8\xad\x55\xe2\x02\x04\x00\x00\xff\xff\xed\xf2\x69\x6a\x52\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xbd\xaa\xc2\x40\x14\x04\xe0\x7e\x9f\xe2\x90\xfe\x5e\xb0\xdd\x4e\xad\x4d\x23\xd8\x0f\xbb\x83\x2c\xba\x3f\xec\x39\x09\x48\xc8\xbb\x0b\x9a\x14\xb6\x33\xdf\x30\x68\xe9\xc6\xae\xa9\x16\x2f\xf3\xc1\x3d\x52\x89\x5e\xae\xec\x73\x0a\x3c\x86\x50\xa7\x62\x2e\xd3\x10\x61\xf0\x4e\xa4\x20\xd3\xcb\xb0\x2c\xf2\x7f\xaa\xd5\xd4\x3a\xda\x2f\x1f\x91\x29\xeb\x3a\x6c\x58\x1b\xc2\xbe\xb8\xa0\xe0\xce\x78\x7e\x4e\x6a\xec\xe3\xde\x7e\xb4\x32\x74\x9a\x7a\xf7\xb7\x7d\xe4\xd7\x37\x72\xef\x00\x00\x00\xff\xff\x46\xc4\x1d\x13\xa3\x00\x00\x00")

func serviceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceaccountYaml,
		"serviceaccount.yaml",
	)
}

func serviceaccountYaml() (*asset, error) {
	bytes, err := serviceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clusterrole.yaml":        clusterroleYaml,
	"clusterrolebinding.yaml": clusterrolebindingYaml,
	"namespace.yaml":          namespaceYaml,
	"serviceaccount.yaml":     serviceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"clusterrole.yaml":        &bintree{clusterroleYaml, map[string]*bintree{}},
	"clusterrolebinding.yaml": &bintree{clusterrolebindingYaml, map[string]*bintree{}},
	"namespace.yaml":          &bintree{namespaceYaml, map[string]*bintree{}},
	"serviceaccount.yaml":     &bintree{serviceaccountYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
